package action

import (
	"fmt"

	"github.com/factly/bindu-server/action/permission"
	organisationReq "github.com/factly/bindu-server/action/permission/organisation"
	spaceReq "github.com/factly/bindu-server/action/permission/space"
	"github.com/factly/bindu-server/action/policy"
	"github.com/factly/bindu-server/action/request"
	"github.com/factly/bindu-server/action/role"
	"github.com/factly/bindu-server/action/user"

	"github.com/factly/x/healthx"
	"github.com/factly/x/middlewarex"

	"github.com/factly/bindu-server/config"
	"github.com/factly/bindu-server/util"
	"github.com/factly/x/loggerx"
	"github.com/go-chi/chi"
	"github.com/go-chi/chi/middleware"
	"github.com/go-chi/cors"
	"github.com/spf13/viper"

	"github.com/factly/bindu-server/action/category"
	"github.com/factly/bindu-server/action/chart"
	"github.com/factly/bindu-server/action/medium"
	"github.com/factly/bindu-server/action/organisation"
	"github.com/factly/bindu-server/action/space"
	"github.com/factly/bindu-server/action/tag"
	"github.com/factly/bindu-server/action/theme"
	_ "github.com/factly/bindu-server/docs" // docs is generated by Swag CLI, you have to import it.
	httpSwagger "github.com/swaggo/http-swagger"
)

//RegisterRoutes - to register routes
func RegisterRoutes() *chi.Mux {

	r := chi.NewRouter()

	r.Use(middleware.RequestID)
	r.Use(loggerx.Init())
	r.Use(middleware.RealIP)
	r.Use(middleware.Recoverer)
	r.Use(middleware.Heartbeat("/ping"))

	r.Use(cors.Handler(cors.Options{
		AllowedOrigins:   []string{"*"},
		AllowedMethods:   []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowedHeaders:   []string{"Accept", "Authorization", "Content-Type", "X-CSRF-Token", "X-User", "X-Organisation"},
		ExposedHeaders:   []string{"Link"},
		AllowCredentials: false,
		MaxAge:           300, // Maximum value not ignored by any of major browsers
	}))

	if viper.IsSet("mode") && viper.GetString("mode") == "development" {
		r.Get("/swagger/*", httpSwagger.WrapHandler)
		fmt.Println("Swagger @ http://localhost:7000/swagger/index.html")
	}

	r.With(util.GormRequestID, middlewarex.CheckUser, middlewarex.CheckSpace(0), util.GenerateOrganisation).Group(func(r chi.Router) {
		r.Mount("/categories", category.Router())
		r.Mount("/charts", chart.Router())
		r.Mount("/media", medium.Router())
		r.Mount("/organisations", organisation.Router())
		r.Mount("/tags", tag.Router())
		r.Mount("/themes", theme.Router())
		r.Mount("/spaces", space.Router())
		r.Mount("/policies", policy.Router())
		r.Mount("/roles", role.Router())
		r.Mount("/users", user.Router())
		r.Mount("/permissions", permission.Router())
		r.Mount("/requests", request.Router())
	})

	r.With(middlewarex.CheckUser).Group(func(r chi.Router) {
		r.Mount("/permissions/organisations/request", organisationReq.OrgRequestRouter())
		r.Mount("/permissions/spaces/request", spaceReq.SpaceRequestRouter())
	})

	sqlDB, _ := config.DB.DB()
	healthx.RegisterRoutes(r, healthx.ReadyCheckers{
		"database": sqlDB.Ping,
		"keto":     util.KetoChecker,
		"kavach":   util.KavachChecker,
	})

	return r

}
